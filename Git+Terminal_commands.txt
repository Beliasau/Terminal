Beliasau

Команды в Git Bash консоли 



clear — Очистить консоль 
open .  - открывает папку в файловой системе (через GUI)
history  -  список комманд на последней сессии (q- выход из режима)


Навигация 


pwd    — Показать текущий каталог
ls     - Показать файлы в данной папке, кроме скрытых
ls -la    -выводить подробный список, в котором будет отображаться владелец, группа, дата создания, размер и другие параметры;включая скрытые
ls -f   — Показать файлы в данной папке, включая и скрытые
cd c:/   — Перейти в конкретный каталог
cd -     — Вернуться назад
cd ..    — Выйти на 1 уровень вверх
cd ../..     — Выйти на 2 уровня вверх 




Создание каталогов 

mkdir      — Создать папку
cd !$       — Перейти в только что созданную папку
mkdir -p {app1,app2}    — Создать сразу несколько папок
mkdir -p app/{css,js}      — Создать сразу несколько вложенных папок 




Создание файлов 

touch         — позволяет создавать файлы
touch FileName.txt        — Создать файл FileName.txt
touch FolderName1/{FolderName2/FileName.css,FolderName3/FileName.js,index.html}          — Создать сразу несколько файлов в существующих папках, никаких лишних пробелов быть не должно 



cat   

(сокращения от слова catenate)
она читает данные из файла или стандартного ввода и выводит их на экран

$ cat опции файл1 файл2 ...

основные опции:

-b - нумеровать только непустые строки;
-E - показывать символ $ в конце каждой строки;
-n - нумеровать все строки;
-s - удалять пустые повторяющиеся строки;
-T - отображать табуляции в виде ^I;
-h - отобразить справку;
-v - версия утилиты.

cat FileName.txt        (просмотр файла)
cat file.txt file1.txt		(выедет содержимое всех указаных файлов в терминал)
cat > FileName.txt	(Создать файл FileName.txt, после ввода текста Ctrl+C)
cat >> FileName.txt	(открытие файла для редактирования, добавляет строки в конец файла)
cat file1 file2 > file3 (обьединение нескольких файлов и запись их в один)
cat mytext.txt > newfile.txt	(копирование файла, создаст новый newfile.txt или перезапишет существующий)
cat mytext.txt >> MYfile.txt		(Присоединение содержимого текстового файла в конец другого текстового файла)
cat mytext.txt mytext2.txt >> MYfile.txt	(последовательно запишет содержимое mytext.txt и mytext2.txt в конец файла MYfile.txt:)





vim
текстовый редактор прямо в терминале

vim test.txt  	(нажимаем i для включения режима набора текста)
Esc - выход из режима
:wq - Сохранить и выйти
:w - просто сохранить данный файл.
:w ПУТЬ/ИМЯ - сохранить копию как.
:q! - не сохранять и выйти.
[[ - вверх файла
]] - вниз файла





echo
(выводит строку текста в терминал)

echo опции строка

опции
-n - не выводить перевод строки;
-e - включить поддержку вывода Escape последовательностей;
-E - отключить интерпретацию Escape последовательностей.

Это все опции, если включена опция -e, то можно использовать такие Escape последовательности для вставки специальных символов:

/c - удалить перевод строки;
/t - горизонтальная табуляция;
/v - вертикальная табуляция;
/b - удалить предыдущий символ;
/n - перевод строки;(отображать новую строку)
/r - символ возврата каретки в начало строки.

echo '"Good job!!"'		(выведет "Good job!!" в терминал )
echo 'hello' > file.txt		(создаст новый file.txt или перезапишет существующий со строкой "hello")
echo 'hello' >> file.txt	(текст будет добавлен в файл)




rm
Удаление файлов 

rm опции файл(ы)

опции:
-i		Выводить запрос на подтверждение удаления каждого файла.
--one-file-system	Во время рекурсивного удаления пропускать директории, которые находятся на других файловых системах.
-r или -R или --recursive	Удаление директорий и их содержимого. Рекурсивное удаление.
-d или --dir		Удалять пустые директории.
-v или --verbose	Выводить информацию об удаляемых файлах.

Примеры
rm FileName.txt       — Удалить файл
rm -r FolderName      — Удалить папку FolderName с файлами внутри неё 
rm myfile1.txt myfile2.txt myfile3.txt 	- удаление несколько файлов
rm -f myfile.txt	-Принудительно удалить защищенный файл
rm *			-Удалить все файлы в текущей директории





mv
Перемещение файлов 

mv опции исходные_файлы куда

help		 — выводит на экран официальную документацию об утилите. Пригодится, если вы забыли другие опции и желаете быстро получить общую сводку.
—version 	— отображает версию mv. Практически никогда не используется пользователями, поскольку определение версии данного инструмента практически никогда не требуется.
-b / —backup /	 — создает копию файлов, которые были перемещены или перезаписаны.
-f 		— при активации не будет спрашивать разрешение у владельца файла, если речь идет о перемещении или переименовании файла.
-i 		— наоборот, будет спрашивать разрешение у владельца.
-n 		— отключает перезапись уже существующих объектов.
—strip-trailing-slashes 	— удаляет завершающий символ / у файла при его наличии.
-t ДИРЕКТОРИЯ 		— перемещает все файлы в указанную директорию.
-u	 — осуществляет перемещение только в том случае, если исходный файл новее объекта назначения.
-v	 — отображает сведения о каждом элементе во время обработки команды.

mv app1/*.* app2	 — Переместит все файлы из папки app1 в папку app2 
mv myfile1.txt myfile2.txt	Переименовать файл
mv mydir1 mydir2	Переименовать директорию
mv myfile1 myfile2 myfile3 mydir/	Переместим сразу три файла в директорию mydir/
mv * mydir/	переместим все файлы из текущей директории в директорию mydir/
mv *.jpg mydir		Переместим все файлы с расширением .jpg в директорию mydir/
mv -n mydir1/* mydir2/		Переместит только те файлы, которых нет в директории назначения



cp
Копирование файлов

cp
-R или -r	скопировать каталог, включая все его файлы и подкаталоги(режим рекурсивного копирования)
-T		скопировать только файлы и подкаталоги, но не исходный каталог
-f 	позволяет принудительно перезаписывать файлы, если в целевой директории уже существуют файлы с такими именами
-n 	позволяет автоматически пропускать файлы с совпадающими именами
-u	 позволяет обновлять файлы, то есть, перезаписывать их только в том случае, если копируемые файлы являются более новыми.
-i	интерактивный режим, если хотим принимать решения относительно перезаписи каждого из файлов

cp file.txt file1.txt  /dir1/		Копировать несколько файлов и каталогов
cp images /home/alex/public_html/	копирование дирректории
cp -Ri * /home/alex/public_html/images/	копирование содержимого текущей директории со всеми поддиректориями 




less

(для просмотра по-настоящему больших текстовых файлов)
команда опции файл

опции
-a, --search-skip-screen — не осуществлять поиск в тексте, который в данный момент отображен на экране;
-bn, --buffers=n — задать размер буфера памяти;
-c, --clear-screen — листать текст, полностью стирая содержимое экрана (построчная прокрутка работать не будет);
-Dxcolor, --color=xcolor — задать цвет отображаемого текста;
-E, --QUIT-AT-EOF — выйти, когда утилита достигнет конца файла;
-e, --quit-at-eof — выйти, когда утилита второй раз достигнет конца файла;
-F, --quit-if-one-screen — выйти, если содержимое файла помещается на одном экране;
-f, --force — открыть специальный файл;
-hn, --max-back-scroll=n — задать максимальное количество строк для прокрутки назад;
-yn, --max-forw-scroll=n — задать максимальное количество строк для прокрутки вперёд;
-i, --ignore-case — игнорировать регистр;
-I, --IGNORE-CASE — игнорировать регистр, даже если паттерн для поиска содержит заглавные буквы;
-jn, --jump-target=n — указать, в какой строке должна быть выведена искомая информация;
-J, --status-column — пометить строки, соответствующие результатам поиска;
-n, --line-numbers — не выводить номера строк;
-N, --LINE-NUMBERS — вывести номера строк;
-s, --squeeze-blank-lines — заменить множество идущих подряд пустых строк одной пустой строкой;
-w, --hilite-unread — выделить первую строку нового фрагмента текста.
+F --Опция указывает , less чтобы посмотреть содержимое файла изменений. Это полезно при открытии файлов журнала

less FileName.txt	(чтение файла)
	w,z 	листает страницы
	q	выход из режима





xargs

объединения нескольких команд Linux в терминале и использования их в качестве конвейера, когда каждая следующая команда получает вывод предыдущей
(может выводить команду и передавать её в качестве аргумента другой команде)
 
первая_команда | xargs опции вторая_команда аргументы

опции

-0, --null - использовать в качестве разделителя нулевой символ. Обычно он находится в конце строки. По умолчанию, в качестве разделителя используется пробел, перевод строки или табуляция;
-a, --arg-file - прочитать аргументы, которые надо передать команде из файла;
-d, --delimiter - использовать нестандартный разделитель строк;
-E, -e, --eof - индикатор конца файла, все символы после вхождения этой строки игнорируются;
-l, --max-lines - количество строк, передающихся в одну команду по умолчанию все;
-n, --max-args - количество параметров, которые передаются в одну команду, по умолчанию все;
-o, --open-tty - открывать новый терминал для дочерних процессов;
-p, --interactive - спрашивать пользователя о запуске каждой следующей команды;
-r, --no-run-if-empty - если входной поток данных пустой, команда не будет выполнена;
--show-limits - посмотреть ограничения на длину параметров в командной строке;
-t, --verbose - максимально подробный вывод утилиты.

grep -r -l sec | xargs -I{} rm {}	Удалить текстовые файлы у которых в содержимом есть слово “sec”
grep -r -h sec | xargs >> newF.txt	Найти все строки c “sec” во всех текстовых файлах, скопировать и вставить эти строки в один новый созданный текстовый файл.
echo  "file1.txt file2.txt file3.txt" | xargs touch		создаст 3 файла file1.txt file2.txt file3.txt




grep

даёт возможность вести поиск строки или конкретного слова или части слова(поиск образца в файле)

опции
-b	Предваряет каждую строку номером блока, в котором она была найдена. Это может пригодиться при поиске блоков по контексту (блоки нумеруются с 0).
-c	Выдает только количество строк, содержащих образец.
-h	Предотвращает выдачу имени файла, содержащего сопоставившуюся строку, перед собственно строкой. Используется при поиске по нескольким файлам.
-i	Игнорирует регистр символов при сравнениях.(поиск без учета регистра)
-l	Выдает только имена файлов, содержащих сопоставившиеся строки, по одному в строке. Если образец найден в нескольких строках файла, имя файла не повторяется.
-L	тот же список имен файлов + пустые папки
-n	Выдает перед каждой строкой ее номер в файле (строки нумеруются с 1).
-s	Подавляет выдачу сообщений о не существующих или недоступных для чтения файлах.
-v	Выдает все строки, за исключением содержащих образец.(найти что-то несоответствующее заданному шаблону)
-w	Ищет выражение как слово, как если бы оно было окружено метасимволами \< и \>.(Поиск всего слова)
-r	поск во всех папках и подкаталогах
-A1 	выведется 1 строка, следующая за основной;
-B1 	напечатает 1 строку перед основной;
-C1 	выведет по одной строке снизу и сверху.
-х	напечатать строки, которые точно соответствуют заданному шаблону, а не какой-то его части
-е -Е	Указание нескольких шаблонов(оператор или)

ls | grep Documents	поиск папки Documents в текущей дирректории
grep 'Class 1' Students.txt	поск словосочетания "Class 1" в файле Students.txt
grep -e 'Class 1' -e Todd Students.txt	   поиск в Students.txt по нескольким параметрам(перед каждым параметром -е обязательно)
grep "Class [1-3]" Students.txt		[-] знак дефиса означает диапазон значений. Это могут быть как буквы, так и цифры.
grep "Class [123]" Students.txt		[квадратные скобки] они используются чтобы проверить на соответствие одному из указанных символов.
grep "\<apple\>" fruits.txt		найти точное соответствие символов  в файле fruits.txt
grep -rl 'string1' ./ | xargs sed -i 's/string1/string2/g'
 Команда заменит все вхождения строки "string1", на "string2" во всех файлах в текущей директории.

find



tail

head

curl

======================================================================================================
git init — создание новых репозиториев; 

git clone <remoteURL> — клонирование удаленного репозитория;

git status

git commit --amend — изменение последнего коммита;

git log — просмотр истории коммитов;

git branch <branch> — создание новой ветки;

git branch –d <branch> — удаление ветки;

git checkout

git stash

git cat-file -t

git cat-file -p

git add

git fetch

git merge <branch> — слияние веток;

git merge --abort

git push <remote> <branch> — отправка ветки на удаленный сервер;

git push <remote> :<branch> — удаление ветки на удаленном сервере;

git tag — просмотр меток;

git push <remote> <tag> — обмен метками;

git remote — отображение удаленных репозиториев;

git pull <remote> <branch> — получение данных из удаленного репозитория и слияние с локальным;

git push <remote> <branch> — отправка локальных изменений на удаленный сервер. 

git diff

git config

git show

git blame

ssh keygen -t rsa -c 