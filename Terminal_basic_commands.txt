Beliasau

Команды в Git Bash консоли 			https://git-scm.com/book/ru/



clear — Очистить консоль 
open .  - открывает папку в файловой системе (через GUI)
history  -  список комманд на последней сессии (q- выход из режима)


Навигация 


pwd    — Показать текущий каталог
ls     - Показать файлы в данной папке, кроме скрытых
ls -la    -выводить подробный список, в котором будет отображаться владелец, группа, дата создания, размер и другие параметры;включая скрытые файлы и папки
ls -f   — Показать файлы в данной папке, включая и скрытые
cd c:/   — Перейти в конкретный каталог
cd -     — Вернуться назад(вернуться в директорию, из которой вы пришли в текущую)
cd ..    — Выйти на 1 уровень вверх
cd ../..     — Выйти на 2 уровня вверх 
dirs -v 	- выведет список папок, где только что находился



Создание каталогов 

mkdir      — Создать папку
cd !$       — Перейти в только что созданную папку
mkdir -p {app1,app2}    — Создать сразу несколько папок
mkdir -p app/{css,js}      — Создать сразу несколько вложенных папок 




Создание файлов 

touch         — позволяет создавать файлы
touch FileName.txt        — Создать файл FileName.txt
touch FileName.txt        — (если файл FileName.txt существует - обновит дату создания файла, может использоваться для отката системы к старой версии
touch FolderName1/{FolderName2/FileName.css,FolderName3/FileName.js,index.html}          — Создать сразу несколько файлов в существующих папках, никаких лишних пробелов быть не должно 



cat   

(сокращения от слова catenate - объединять)
она читает данные из файла или стандартного ввода и выводит их на экран

$ cat опции файл1 файл2 ...

основные опции:

-b - нумеровать только непустые строки;
-E - показывать символ $ в конце каждой строки;
-n - нумеровать все строки;
-s - удалять пустые повторяющиеся строки;
-T - отображать табуляции в виде ^I;
-h - отобразить справку;
-v - версия утилиты.

cat FileName.txt        (просмотр файла)
cat file.txt file1.txt		(выедет содержимое всех указаных файлов в терминал)
cat > FileName.txt	(Создаст новый файл FileName.txt, или перезапишет существующий, после ввода текста Ctrl+C)
cat >> FileName.txt	(открытие файла для редактирования, добавляет строки в конец файла)
cat file1 file2 > file3 (обьединение нескольких файлов и запись их в один)
cat mytext.txt > newfile.txt	(копирование файла, создаст новый newfile.txt или перезапишет существующий)
cat mytext.txt >> MYfile.txt		(Присоединение содержимого текстового файла в конец другого текстового файла)
cat mytext.txt mytext2.txt >> MYfile.txt	(последовательно запишет содержимое mytext.txt и mytext2.txt в конец файла MYfile.txt:)





vim
текстовый редактор прямо в терминале

vim test.txt  	(нажимаем i для включения режима набора текста)
Esc - выход из режима
:wq - Сохранить и выйти
:w - просто сохранить данный файл.
:w ПУТЬ/ИМЯ - сохранить копию как.
:q! - не сохранять и выйти.
[[ - вверх файла
]] - вниз файла





echo
(выводит строку текста в терминал)

echo опции строка

опции
-n - не выводить перевод строки;
-e - включить поддержку вывода Escape последовательностей;
-E - отключить интерпретацию Escape последовательностей.

Это все опции, если включена опция -e, то можно использовать такие Escape последовательности для вставки специальных символов:

/c - удалить перевод строки;
/t - горизонтальная табуляция;
/v - вертикальная табуляция;
/b - удалить предыдущий символ;
/n - перевод строки;(отображать новую строку)
/r - символ возврата каретки в начало строки.

echo '"Good job!!"'		(выведет "Good job!!" в терминал )
echo 'hello' > file.txt		(создаст новый file.txt или перезапишет существующий со строкой "hello")
echo 'hello' >> file.txt	(текст будет добавлен в файл)




rm
Удаление файлов 

rm опции файл(ы)

опции:
-i		Выводить запрос на подтверждение удаления каждого файла.
--one-file-system	Во время рекурсивного удаления пропускать директории, которые находятся на других файловых системах.
-r или -R или --recursive	Удаление директорий и их содержимого. Рекурсивное удаление.
-d или --dir		Удалять пустые директории.
-v или --verbose	Выводить информацию об удаляемых файлах.

Примеры
rm FileName.txt       — Удалить файл
rm -r FolderName      — Удалить папку FolderName с файлами внутри неё 
rm myfile1.txt myfile2.txt myfile3.txt 	- удаление несколько файлов
rm -f myfile.txt	-Принудительно удалить защищенный файл
rm *			-Удалить все файлы в текущей директории





mv
Перемещение файлов 

mv опции исходные_файлы куда

help		 — выводит на экран официальную документацию об утилите. Пригодится, если вы забыли другие опции и желаете быстро получить общую сводку.
—version 	— отображает версию mv. Практически никогда не используется пользователями, поскольку определение версии данного инструмента практически никогда не требуется.
-b / —backup /	 — создает копию файлов, которые были перемещены или перезаписаны.
-f 		— при активации не будет спрашивать разрешение у владельца файла, если речь идет о перемещении или переименовании файла.
-i 		— наоборот, будет спрашивать разрешение у владельца.
-n 		— отключает перезапись уже существующих объектов.
—strip-trailing-slashes 	— удаляет завершающий символ / у файла при его наличии.
-t ДИРЕКТОРИЯ 		— перемещает все файлы в указанную директорию.
-u	 — осуществляет перемещение только в том случае, если исходный файл новее объекта назначения.
-v	 — отображает сведения о каждом элементе во время обработки команды.


mv myfile1.txt myfile2.txt	Переименовать файл
mv mydir1 mydir2			Переименовать директорию
mv myfile1 myfile2 myfile3 mydir	Переместим сразу три файла в директорию mydir
mv *  /mydir				переместим все файлы из текущей директории в директорию mydir
mv *.jpg mydir				Переместим все файлы с расширением .jpg в директорию mydir
mv -n mydir1/* mydir2		Переместит только те файлы, которых нет в директории назначения



cp
Копирование файлов

cp
-R или -r	скопировать каталог, включая все его файлы и подкаталоги(режим рекурсивного копирования)
-T		скопировать только файлы и подкаталоги, но не исходный каталог
-f 	позволяет принудительно перезаписывать файлы, если в целевой директории уже существуют файлы с такими именами
-n 	позволяет автоматически пропускать файлы с совпадающими именами
-u	 позволяет обновлять файлы, то есть, перезаписывать их только в том случае, если копируемые файлы являются более новыми.
-i	интерактивный режим, если хотим принимать решения относительно перезаписи каждого из файлов

cp file.txt file1.txt  /dir1/		Копировать несколько файлов и каталогов
cp images /home/alex/public_html/	копирование дирректории
cp -Ri * /home/alex/public_html/images/	копирование содержимого текущей директории со всеми поддиректориями 




less

(для просмотра по-настоящему больших текстовых файлов)
команда опции файл

опции
-a, --search-skip-screen — не осуществлять поиск в тексте, который в данный момент отображен на экране;
-bn, --buffers=n — задать размер буфера памяти;
-c, --clear-screen — листать текст, полностью стирая содержимое экрана (построчная прокрутка работать не будет);
-Dxcolor, --color=xcolor — задать цвет отображаемого текста;
-E, --QUIT-AT-EOF — выйти, когда утилита достигнет конца файла;
-e, --quit-at-eof — выйти, когда утилита второй раз достигнет конца файла;
-F, --quit-if-one-screen — выйти, если содержимое файла помещается на одном экране;
-f, --force — открыть специальный файл;
-hn, --max-back-scroll=n — задать максимальное количество строк для прокрутки назад;
-yn, --max-forw-scroll=n — задать максимальное количество строк для прокрутки вперёд;
-i, --ignore-case — игнорировать регистр;
-I, --IGNORE-CASE — игнорировать регистр, даже если паттерн для поиска содержит заглавные буквы;
-jn, --jump-target=n — указать, в какой строке должна быть выведена искомая информация;
-J, --status-column — пометить строки, соответствующие результатам поиска;
-n, --line-numbers — не выводить номера строк;
-N, --LINE-NUMBERS — вывести номера строк;
-s, --squeeze-blank-lines — заменить множество идущих подряд пустых строк одной пустой строкой;
-w, --hilite-unread — выделить первую строку нового фрагмента текста.
+F --Опция указывает , less чтобы посмотреть содержимое файла изменений. Это полезно при открытии файлов журнала

less FileName.txt	(чтение файла)
	w,z 	листает страницы
	q	выход из режима





xargs

объединения нескольких команд Linux в терминале и использования их в качестве конвейера, когда каждая следующая команда получает вывод предыдущей
(может выводить команду и передавать её в качестве аргумента другой команде)
 
первая_команда | xargs опции вторая_команда аргументы
 xargs [OPTION]... COMMAND [INITIAL-ARGS]...


опции

-0, --null - использовать в качестве разделителя нулевой символ. Обычно он находится в конце строки. По умолчанию, в качестве разделителя используется пробел, перевод строки или табуляция;
-a, --arg-file - прочитать аргументы, которые надо передать команде из файла;
-d, --delimiter - использовать нестандартный разделитель строк;
-E, -e, --eof - индикатор конца файла, все символы после вхождения этой строки игнорируются;
-l, --max-lines - количество строк, передающихся в одну команду по умолчанию все;
-n, --max-args - количество параметров, которые передаются в одну команду, по умолчанию все;
-o, --open-tty - открывать новый терминал для дочерних процессов;
-p, --interactive - спрашивать пользователя о запуске каждой следующей команды;
-r, --no-run-if-empty - если входной поток данных пустой, команда не будет выполнена;
--show-limits - посмотреть ограничения на длину параметров в командной строке;
-t, --verbose - максимально подробный вывод утилиты.
-I, -i, -R    --replace[=R] заменяет R в INITIAL-ARGS именами, прочитанными из стандартного ввода, разделенного на новые строки;


grep -r -l sec | xargs -I{} rm {}	Удалить текстовые файлы у которых в содержимом есть слово “sec”
grep -r -h sec | xargs >> newF.txt	Найти все строки c “sec” во всех текстовых файлах, скопировать и вставить эти строки в один новый созданный текстовый файл.
echo  "file1.txt file2.txt file3.txt" | xargs touch		создаст 3 файла file1.txt file2.txt file3.txt
seq 15 | xargs -Iz echo "This line z" >tf_4.txt  создаст файл tf_4.txt в котором будет 15 строк (This line z(номер по порядку))




seq  утилитa выводят последовательность целых чисел с шагом, заданным пользователем.

По-умолчанию, выводимые числа отделяются друг от друга символом перевода строки, однако, с помощью ключа -s 
может быть задан другой разделитель

bash$ seq 5
1
2
3
4
5


bash$ seq -s : 5
1:2:3:4:5

seq 15 | xargs -Iz echo "This line z" > tf_4.txt
Сделать текстовый файл tf_4.txt в котором будет 15 строк





grep

$ grep [опции] шаблон [/путь/к/файлу/или/папке...]
Или:
$ команда | grep [опции] шаблон

даёт возможность вести поиск строки или конкретного слова или части слова(поиск образца в файле)

опции
-b	Предваряет каждую строку номером блока, в котором она была найдена. Это может пригодиться при поиске блоков по контексту (блоки нумеруются с 0).
-c	Выдает только количество строк, содержащих образец.
-h	Предотвращает выдачу имени файла, содержащего сопоставившуюся строку, перед собственно строкой. Используется при поиске по нескольким файлам.
-i	Игнорирует регистр символов при сравнениях.(поиск без учета регистра)
-l	Выдает только имена файлов, содержащих сопоставившиеся строки, по одному в строке. Если образец найден в нескольких строках файла, имя файла не повторяется.
-L	тот же список имен файлов + пустые папки
-n	Выдает перед каждой строкой ее номер в файле (строки нумеруются с 1).
-s	Подавляет выдачу сообщений о не существующих или недоступных для чтения файлах.
-v	Выдает все строки, за исключением содержащих образец.(найти что-то несоответствующее заданному шаблону)
-w	Ищет выражение как слово, как если бы оно было окружено метасимволами \< и \>.(Поиск всего слова)
-r	поск во всех папках и подкаталогах (в том числе и скрытых)
-A1 	выведется 1 строка, следующая за основной;
-B1 	напечатает 1 строку перед основной;
-C1 	выведет по одной строке снизу и сверху.
-х	напечатать строки, которые точно соответствуют заданному шаблону, а не какой-то его части
-е -Е	Указание нескольких шаблонов(оператор или)

ls | grep Documents	поиск папки Documents в текущей дирректории
grep 'Class 1' Students.txt	поск словосочетания "Class 1" в файле Students.txt
grep -e 'Class 1' -e Todd Students.txt	   поиск в Students.txt по нескольким параметрам(перед каждым параметром -е обязательно)
grep "Class [1-3]" Students.txt		[-] знак дефиса означает диапазон значений. Это могут быть как буквы, так и цифры.
grep "Class [123]" Students.txt		[квадратные скобки] они используются чтобы проверить на соответствие одному из указанных символов.
grep "\<apple\>" fruits.txt		найти точное соответствие символов  в файле fruits.txt
grep -rl 'string1' ./ | xargs sed -i 's/string1/string2/g'
 Команда заменит все вхождения строки "string1", на "string2" во всех файлах в текущей директории.


grep -nr Natalya | cat >> login.txt			найти все строки где содержится логин пользователя Наталья и скопировать их в отдельный файл login.txt , поиск в текущей папке по всем папкам ниже уровнем



find
поиск файлов по шаблону

find [папка] [параметры] критерий шаблон [действие]

параметры
-P - никогда не открывать символические ссылки.
-L - получает информацию о файлах по символическим ссылкам. Важно для дальнейшей обработки, чтобы обрабатывалась не ссылка, а сам файл.
-maxdepth - максимальная глубина поиска по подкаталогам, для поиска только в текущем каталоге установите 1.
-depth - искать сначала в текущем каталоге, а потом в подкаталогах.
-mount искать файлы только в этой файловой системе.
-version - показать версию утилиты find.
-print - выводить полные имена файлов.
-type f - искать только файлы.
-type d - поиск папки в Linux.

критерии
-name - поиск файлов по имени.
-perm - поиск файлов в Linux по режиму доступа.
-user - поиск файлов по владельцу.
-group - поиск по группе.
-mtime - поиск по времени модификации файла.
-atime - поиск файлов по дате последнего чтения.
-nogroup - поиск файлов, не принадлежащих ни одной группе.
-nouser - поиск файлов без владельцев.
-newer - найти файлы новее чем указанный.
-size - поиск файлов в Linux по их размеру

Действия
К команде find можно добавить действия, которые будут произведены с результатами поиска.
-delete — Удаляет соответствующие результатам поиска файлы
-ls — Вывод более подробных результатов поиска с:
Размерами файлов.
Количеством inode.
-print Стоит по умолчанию, если не указать другое действие. Показывает полный путь к найденным файлам.
-exec Выполняет указанную команду в каждой строке результатов поиска.

-exec:
Данное действие является особенным и позволяет выполнить команду по вашему усмотрению в результатах поиска.
-exec command {} \;
Где:
command – это команда, которую вы желаете выполнить для результатов поиска. Например:
rm
mv
cp
{} – является результатами поиска.
\; — Команда заканчивается точкой с запятой после обратного слеша.


$ find . -name "*.jpg" -exec cp {} /backups/fotos \;  	скопировать все .jpg изображения в каталог backups/fotos
$ find . -empty -exec rm {} \;			удалить все пустые файлы в текущей папке
 find /home/bob/dir -type f -name *.log -size +100M -exec rm -f {} \;		Удалить все файлы больше 100 мегабайт:

find . -name "testfile*"	Поиск по имени в текущей папке
find . -iname "TeStFile*"	Не учитывать регистр при поиске по имени
find . -user sergiy		Найти все файлы, принадлежащие пользователю
find . -name "*png" -delete -print	найти в текущей папке файлы у которых в названии есть *png и удалить, и (-print) показать файлы которые удалились

найти файлы нач на log во всех папках, в том числе и текущей
find . -name -type f log*	для файлов
find . -name -type d log*	для папок





head и tail 
вывод начала и хвоста файла

Команда head выводит первые десять строк файла, а tail — последние десять. 
Количество строк может регулироваться с помощью параметра — n.
-f выводит добавленные данные по мере увеличения файла;
head -n FileName.txt
tail -n FileName.txt
tail -f filename.txt 	просмотреть содержимое в реальном времени 



curl 
(расшифровывается как Client URL) — утилита командной строки для скачивания и загрузки данных
curl [ОПЦИИ] [АРГУМЕНТ(URL)]
опции
-# — отображать простой прогресс-бар во время загрузки;
-0 — использовать протокол http 1.0;
-1 — использовать протокол шифрования tlsv1;
-2 — использовать sslv2;
-3 — использовать sslv3;
-4 — использовать ipv4;
-6 — использовать ipv6;
-A — указать свой USER_AGENT;
-b — сохранить Cookie в файл;
-c — отправить Cookie на сервер из файла;
-C — продолжить загрузку файла с места разрыва или указанного смещения;
-m — максимальное время ожидания ответа от сервера;
-d — отправить данные методом POST;
-D — сохранить заголовки, возвращенные сервером в файл;
-e — задать поле Referer-uri, указывает с какого сайта пришел пользователь;
-E — использовать внешний сертификат SSL;
-f — не выводить сообщения об ошибках;
-F — отправить данные в виде формы;
-G — если эта опция включена, то все данные, указанные в опции -d будут передаваться методом GET;
-H — передать заголовки на сервер;
-I — получать только HTTP заголовок, а все содержимое страницы игнорировать;
-j — прочитать и отправить cookie из файла;
-J — удалить заголовок из запроса;
-L — принимать и обрабатывать перенаправления;
-s — максимальное количество перенаправлений с помощью Location;
-o — выводить контент страницы в файл;
-O — сохранять контент в файл с именем страницы или файла на сервере;
-p — использовать прокси;
—proto — указать протокол, который нужно использовать;
-R — сохранять время последнего изменения удаленного файла;
-s — выводить минимум информации об ошибках;
-S — выводить сообщения об ошибках;
-T — загрузить файл на сервер;
-v — максимально подробный вывод;
-y — минимальная скорость загрузки;
-Y — максимальная скорость загрузки;
-z — скачать файл, только если он был модифицирован позже указанного времени;
-V — вывести версию.

curl ifconfig.me покажет мой IP адрес
curl wttr.in покажет прогноз погоды))
curl -X post http://  отправка запроса методом POST



===================================================================================================


sertificate

найти файлы нач на log во всех папках, в том числе и текущей
find . -name -type f log*	для файлов
find . -name -type d log*	для папок


найти файлы начин на log в папке которая находиться по соседству с текущей
find ../folder -name -type f log*	


найти логи пользователя с именем Наталья в файле logs.log
grep Natalya logs.log


найти все строки где содержится логин пользователя Наталья и скопировать их в отдельный файл login.txt , поиск в текущей папке по всем папкам ниже уровнем
grep -nr Natalya | cat >> login.txt



====================================================================================================



Linux COMMANDS




====================================================================================================



create a script for the terminal



создаем файл (my_script.txt ) со скриптом
первой строкой в фале должна быть

	#!/bin/bash

#! это указание на местоположение интерпретатора. Чтобы при запуске скрипта не требовалось указывать отдельно интерпретатор. Убедиться, что ваш bash интерпретатор лежит по этому пути можно через команду   which bash  ,
далее идет сам скрипт,например;

	#!/bin/bash
	echo "Hello, World!"

Запустить ваш скрипт/команду можно двумя способами.
Способ №1: 
вызывается интерпретатор и в аргументе передаете ему имя файла для исполнения.

	bash my_script.txt  

Способ №2: Сначала надо разрешить системе исполнять скрипт: 

	chmod +x my_script.txt  

Эта команда сделает файл исполняемым.теперь можно запустить его как любой бинарный файл в linux:

	./my_script.txt    
cкрипт запускается




#! шебанг линия.
загрузчик программ рассматривает остаток строки после шебанга как имя файла программы-интерпретатора. Загрузчик запускает эту программу и передаёт ей в качестве параметра имя файла скрипта с шебангом.	Например, если полное имя файла скрипта "path/to/script" и первая строка этого файла:
#!/bin/sh
то загрузчик запускает на выполнение "/bin/sh" (обычно это Bourne shell или совместимый интерпретатор командной строки) и передаёт "path/to/script" как первый параметр.



======




date

выведет время и дату в терминал



======



tree

выгружает текстуру файловой системы из текущей папки



======



sudo

Sudo - это сокращение от superuser do. Это позволяет разрешенному пользователю (пользователю-администратору) запускать команды в терминале от имени суперпользователя или другого пользователя с дополнительными привилегиями безопасности.



======


chmod

Команда chmod (изменить режим) предназначена для изменения прав доступа к файлам и каталогам в Unix-подобных операционных системах.  чтение ( r ), запись ( w ) и выполнение ( x ) 

Синтаксис 

chmod [ключи] установка_прав имя_файла

Ключи необязательны. Устанавливать права можно двумя способами: с помощью буквенного обозначения прав (rwx) и с помощью числового в восьмеричной системе счисления.



======


ssh

SSH или Secure Shell (что в переводе значит «безопасная оболочка») — это сетевой протокол, используемый для подключения к удаленным компьютерам(серверам) и управлениями ими с помощью технологии туннелирования.
к примеру, есть сервер под управлением Linux, то подключаемся к нему, То есть вводим сначала команду в духе ( ssh root@192.168.60.55 ) и потом выполняем команды, связанные непосредственно с ОС. 




======


ps

программа для просмотра списка процессов в Linux. 
процессы могут быть в 4 сосотояниях:
запуск
ожидание 
установлено
зомби




======



top

выводит информацию, которую можно условно разделить на две части. В верхней части находится информация о системе, общем использовании ресурсов процессора и памяти, раздела подкачки, и так далее. В нижней части окна расположен список запущенных процессов с информацией, отсортированных по определённому полю.





======



kill

комманда для принудительного завершения работы приложения
Это особенно полезно для серверов, когда не хотите, чтобы зависшая программа привела к выключению всего сервера.
 
$ kill [сигнал или опция] PID

Если не знаем точно PID приложения, просто запустить команду:
$ ps ux

Сигнал по умолчанию (если он не задан) - SIGTERM. 

SIGTERM - этот сигнал запрашивает остановку работы процесса. Он может быть проигнорирован. Процессу дается время на корректное завершение. Если программа завершается корректно, значит она использовала данное время на то, чтобы сохранить свое состояние или результаты работы и освободить ресурсы. Другими словами, ее не заставляли остановиться.

SIGKILL - этот сигнал заставляет процесс прекратить работу немедленно. Программа не может проигнорировать этот сигнал. Несохраненные результаты будут потеряны.





======


ping

Ping или Packet Internet Groper - это утилита для управления сетью, которая может проверить состояние соединения между компьютером/устройством источника и назначения через IP-сеть. Она также помогает оценить время, необходимое для отправки и получения ответа от сети.

$ ping опции адрес_узла




======



locate

утилита командной строки для поиска файлов по имени в Linux, подобно команде find.  однако, ведёт поиск в собственной базе данных. Find же шаг за шагом проходит через всю иерархию директорий.
Обновление базы данных locate происходит автоматически, как правило, раз в сутки. 

$ locate опции шаблон_для_поиска





======



id

команда для отображения системного идентификатора (номер, идентифицирующий пользователя) указанного пользователя. Когда информация определена, то система покажет следующие данные: Имя и идентификатор пользователя Имя и идентификатор основной группы пользователя

$ id [параметры] [имя пользователя]




======



more

Утилита more предназначена для постраничного просмотра файлов в терминале Linux. Своим названием она обязана надписи more (в русскоязычном варианте — дальше), появляющейся внизу каждой страницы.

Команда more linux — одна из самых примитивных команд для работы с текстом. Её ближайшая родственница — команда less — обладает куда большим набором опций и дополнительных возможностей. 

$ more опции файл





======



wc

подсчитывает число строк, слов и байт в файлах, указанных в параметре Файл. Если параметр Файл не задан, то данные считываются из стандартного потока ввода. Результат работы команды записывается в стандартный поток вывода и в нем указывается суммарное число строк, слов и байт во всех заданных файлах.

$ wc file.name



======



which

команда используется для определения местоположения данного исполняемого файла, который выполняется при вводе имени исполняемого файла (команды) в строке терминала.

which [OPTIONS] FILE_NAME

покажет путь к исполняемому файлу



======



;

используется для выполнения команд в одну сроку, команды перечисляются через ;


 
======


|



======




regexp

Регулярные выражения ( regexp, или regex)

Основные регулярные выражения

.	заменяет любой символ
\. 	точка
^	соответствует началу строки
$	соответствует концу строки
*	совпадает ноль или более раз с предыдущим символом
\	Представлять специальные символы
()	Группирует регулярные выражения
?	Соответствует ровно одному символу


cat filename.txt | grep a  	Поиск содержимого, содержащего букву «а».
cat filename.txt | grep ^a  	контент, который НАЧИНАЕТСЯ с a
cat filename.txt | grep a$	контент, который заканчивается на a

квадратные скобки
Внутри них мы указываем набор допустимых символов. Это может быть перечисление нужных букв, или указание диапазона:
[нл] — только «н» и «л»
[а-я] — все русские буквы в нижнем регистре от «а» до «я» (кроме «ё»)
[А-Я]    — все заглавные русские буквы
[А-Яа-яЁё]  — все русские буквы
[a-z]  — латиница мелким шрифтом
[a-zA-Z]  — все английские буквы
[0-9]  — любая цифра
[В-Ю]   — буквы от «В» до «Ю» (да, диапазон — это не только от А до Я)
[А-ГО-Р]   — буквы от «А» до «Г» и от «О» до «Р»

если мы перечисляем возможные варианты, мы не ставим между ними разделителей! Ни пробел, ни запятую — ничего

^ внутри [] означает исключение:
[^0-9]  — любой символ, кроме цифр
[^ёЁ]  — любой символ, кроме буквы «ё»
[^а-в8]  — любой символ, кроме букв «а», «б», «в» и цифры 8

квадратные скобки являются спецсимволами, их нельзя найти в тексте без экранирования:
найти именно 0-левой элемент массива, надо записать так:
Regex:	 	fruits\[0\]

мы не можем записать диапазон [1-31]. Потому что это будет значить не «диапазон от 1 до 31», а «диапазон от 1 до 3, плюс число 1». Поэтому пишем шаблон для каждой цифры отдельно.

шаблон даты, Мы рассмотрим ДД.ММ.ГГГГ:
 (0[1-9]|[12][0-9]|3[01])\.[0-1][0-9]\.[12][09][0-9][0-9]		(|   или)


если мы хотим указать допустимые значения:
Одного символа — используем []
Нескольких символов или целого слова — используем |
(|   или)





======



apt

это утилита командной строки для установки, обновления, удаления и иного управления пакетами deb в Ubuntu, Debian и связанных с ними дистрибутивах Linux.

apt update ...
apt upgrade ...
apt install ...
apt remove ...





======



whatis

используется для однострочного обзора команды, параметра или флага
Выводит краткое однострочное описание из руководства.

whatis {{command}}



======



diff file1.txt file2.txt    		сравнивает 2 файла



======


Wget 

утилита командной строки и сетевой загрузчик файлов, которая поставляется со множеством функций, упрощающих загрузку файлов

wget [option] [URL]